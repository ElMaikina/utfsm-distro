// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: gema.proto

package tierra_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GemaEstrategica_SolicitarM_FullMethodName = "/GemaEstrategica/SolicitarM"
)

// GemaEstrategicaClient is the client API for GemaEstrategica service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GemaEstrategicaClient interface {
	SolicitarM(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*Respuesta, error)
}

type gemaEstrategicaClient struct {
	cc grpc.ClientConnInterface
}

func NewGemaEstrategicaClient(cc grpc.ClientConnInterface) GemaEstrategicaClient {
	return &gemaEstrategicaClient{cc}
}

func (c *gemaEstrategicaClient) SolicitarM(ctx context.Context, in *Solicitud, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, GemaEstrategica_SolicitarM_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GemaEstrategicaServer is the server API for GemaEstrategica service.
// All implementations must embed UnimplementedGemaEstrategicaServer
// for forward compatibility
type GemaEstrategicaServer interface {
	SolicitarM(context.Context, *Solicitud) (*Respuesta, error)
	mustEmbedUnimplementedGemaEstrategicaServer()
}

// UnimplementedGemaEstrategicaServer must be embedded to have forward compatible implementations.
type UnimplementedGemaEstrategicaServer struct {
}

func (UnimplementedGemaEstrategicaServer) SolicitarM(context.Context, *Solicitud) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SolicitarM not implemented")
}
func (UnimplementedGemaEstrategicaServer) mustEmbedUnimplementedGemaEstrategicaServer() {}

// UnsafeGemaEstrategicaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GemaEstrategicaServer will
// result in compilation errors.
type UnsafeGemaEstrategicaServer interface {
	mustEmbedUnimplementedGemaEstrategicaServer()
}

func RegisterGemaEstrategicaServer(s grpc.ServiceRegistrar, srv GemaEstrategicaServer) {
	s.RegisterService(&GemaEstrategica_ServiceDesc, srv)
}

func _GemaEstrategica_SolicitarM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Solicitud)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GemaEstrategicaServer).SolicitarM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GemaEstrategica_SolicitarM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GemaEstrategicaServer).SolicitarM(ctx, req.(*Solicitud))
	}
	return interceptor(ctx, in, info, handler)
}

// GemaEstrategica_ServiceDesc is the grpc.ServiceDesc for GemaEstrategica service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GemaEstrategica_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GemaEstrategica",
	HandlerType: (*GemaEstrategicaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SolicitarM",
			Handler:    _GemaEstrategica_SolicitarM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gema.proto",
}
